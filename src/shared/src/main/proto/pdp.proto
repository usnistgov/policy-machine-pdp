syntax = "proto3";

import "epp.proto";
import "google/protobuf/struct.proto";

option java_multiple_files = true;
option java_package = "gov.nist.csd.pm.proto.pdp";

package gov.nist.csd.pm.proto.pdp;

enum Decision {
  GRANT = 0;
  DENY = 1;
}

message PDPResponse {
  Decision decision = 1;
  optional google.protobuf.Struct value = 2;
  optional google.protobuf.Struct explain = 3;
}

// resource
message ResourceOperationRequestByName {
  string operation = 1;
  string target = 2;
}

message ResourceOperationRequestById {
  string operation = 1;
  int64 target = 2;
}

service ResourcePDP {
  rpc AdjudicateResourceOperationByName(ResourceOperationRequestByName) returns (PDPResponse) {}
  rpc AdjudicateResourceOperationById(ResourceOperationRequestById) returns (PDPResponse) {}
}

// admin

// Request to invoke an admin operation. The operation is identified by its name.
message AdminOperationRequest {
  string opName = 1;
  repeated gov.nist.csd.pm.proto.epp.OperandEntry operands = 2;
}

// Request to invoke an admin routine. The routine is defined by a set of operation requests.
message AdminRoutineRequest {
  repeated AdminOperationRequest ops = 1;
}

// Request is an invocation request of a routine that is predefined and defined by its name.
message NamedAdminRoutineRequest {
  string name = 1;
  repeated gov.nist.csd.pm.proto.epp.OperandEntry operands = 2;
}

// Request to execute a block of PML statements as a routine.
message ExecutePmlRequest {
  string pml = 1;
}

// Service for handling NGAC administrative operations.
service AdminPDP {
  // Adjudicate the operation provided in the request.
  rpc AdjudicateAdminOperation(AdminOperationRequest) returns (PDPResponse) {}

  // Adjudicate the provided routine. Each operation request will need to pass an access check. If one operation fails,
  // the whole routine will be rolled back.
  rpc AdjudicateAdminRoutine(AdminRoutineRequest) returns (PDPResponse) {}

  // Adjudicate the named routine in the request.
  rpc AdjudicateNamedAdminRoutine(NamedAdminRoutineRequest) returns (PDPResponse) {}

  // Adjudicate the PML request.
  rpc ExecutePml(ExecutePmlRequest) returns (PDPResponse) {}
}
package gov.nist.csd.pm.pdp.admin.pdp;

import com.eventstore.dbclient.WrongExpectedVersionException;
import gov.nist.csd.pm.core.common.exception.PMException;
import gov.nist.csd.pm.core.common.exception.PMRuntimeException;
import gov.nist.csd.pm.pdp.admin.pap.EventTrackingPAP;
import gov.nist.csd.pm.pdp.proto.adjudication.AdminCommand;
import gov.nist.csd.pm.pdp.proto.event.PMEvent;
import gov.nist.csd.pm.pdp.shared.eventstore.CurrentRevisionService;
import gov.nist.csd.pm.pdp.shared.eventstore.EventStoreConnectionManager;
import gov.nist.csd.pm.pdp.shared.eventstore.EventStoreDBConfig;
import io.github.resilience4j.retry.Retry;
import io.github.resilience4j.retry.RetryConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;

@Component
public class Adjudicator {

    private static final Logger logger = LoggerFactory.getLogger(Adjudicator.class);

    private final CommandHandler commandHandler;
    private final CurrentRevisionService currentRevision;
    private final Retry retry;
    private final EventStoreDBConfig eventStoreDBConfig;
    private final EventStoreConnectionManager eventStoreConnectionManager;
    private final ContextFactory contextFactory;

    public Adjudicator(CommandHandler commandHandler,
                       EventStoreDBConfig eventStoreDBConfig,
                       EventStoreConnectionManager eventStoreConnectionManager,
                       CurrentRevisionService currentRevision,
                       ContextFactory contextFactory) {
        this.commandHandler = commandHandler;
        this.eventStoreDBConfig = eventStoreDBConfig;
        this.eventStoreConnectionManager = eventStoreConnectionManager;
        this.currentRevision = currentRevision;
        this.contextFactory = contextFactory;
        this.retry = Retry.of("Adjudicator", RetryConfig.custom()
                .retryExceptions(WrongExpectedVersionException.class)
                .maxAttempts(3)
                .waitDuration(Duration.ofSeconds(2))
                .build());
    }

    /**
     * Adjudicates a transaction function and returns the result.
     *
     * @param <R> The return type
     * @param consumer The transaction function to execute
     * @return The result of the transaction
     */
    public <R> R adjudicateQuery(PDPTxFunction<R> consumer) {
        try {
            NGACContext ctx = contextFactory.createContext();
	        return ctx.pdp().runTx(ctx.userCtx(), consumer::apply);
        } catch (PMException e) {
            throw new PMRuntimeException(e);
        }
    }

    /**
     * Adjudicates a list of administrative commands.
     *
     * @param adminCommands The commands to adjudicate
     * @return A map of created node IDs
     */
    public Map<String, Long> adjudicateAdminCommands(List<AdminCommand> adminCommands) {
        Map<String, Long> createdNodeIds = new HashMap<>();

        adjudicateTransaction(ctx -> {
            ctx.pdp().runTx(ctx.userCtx(), pdpTx -> {
                for (AdminCommand adminCommand : adminCommands) {
                    commandHandler.handleCommand(pdpTx, adminCommand, createdNodeIds);
                }

                return null;
            });
        });

        return createdNodeIds;
    }

    /**
     * Executes a transaction consumer and returns the events.
     *
     * @param txConsumer The transaction consumer to execute
     * @return The list of events generated by the transaction
     */
    public List<PMEvent> adjudicateTransaction(PMConsumer<NGACContext> txConsumer) {
        Supplier<List<PMEvent>> supplier = () -> {
            try {
                NGACContext ctx = contextFactory.createContext();
                txConsumer.accept(ctx);
                return publishEvents(ctx.pap());
            } catch (PMException e) {
                throw new PMRuntimeException(e);
            }
        };

        return Retry.decorateSupplier(retry, supplier).get();
    }


    /**
     * Adjudicates an administrative operation.
     *
     * @param opName The operation name
     * @param args The operation arguments
     * @return The adjudication response
     */
    public Object adjudicateAdminOperation(String opName, Map<String, Object> args) {
        Supplier<Object> supplier = () -> {
            try {
                NGACContext ctx = contextFactory.createContext();
                Object adjudicationResponse = ctx.pdp().adjudicateAdminOperation(
                        ctx.userCtx(),
                        opName,
                        args
                );
                publishEvents(ctx.pap());
                return adjudicationResponse;
            } catch (PMException e) {
                throw new PMRuntimeException(e);
            }
        };

        return Retry.decorateSupplier(retry, supplier).get();
    }

    /**
     * Adjudicates an administrative routine.
     *
     * @param opName The routine name
     * @param args The routine arguments
     * @return The adjudication response
     */
    public Object adjudicateAdminRoutine(String opName, Map<String, Object> args) {
        Supplier<Object> supplier = () -> {
            try {
                NGACContext ctx = contextFactory.createContext();
                Object adjudicationResponse = ctx.pdp().adjudicateAdminRoutine(
                        ctx.userCtx(),
                        opName,
                        args
                );
                publishEvents(ctx.pap());
                return adjudicationResponse;
            } catch (PMException e) {
                throw new PMRuntimeException(e);
            }
        };

        return Retry.decorateSupplier(retry, supplier).get();
    }

    private List<PMEvent> publishEvents(EventTrackingPAP pap) throws PMException {
        long revision = currentRevision.get();
        return pap.publishToEventStore(
                eventStoreConnectionManager.getOrInitClient(),
                eventStoreDBConfig.getEventStream(),
                revision
        );
    }
}